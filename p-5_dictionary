#include <iostream>
using namespace std;
class Node
{

public:
    string key;
    string mean;
    Node *left;
    Node *right;
    Node(string k,string m)
    {
        key=k;
        mean=m;
        left = NULL;
        right = NULL;
    }
};
class BST
{
public:
    Node *insertToBst(Node *root, string keyW,string meaning)
    {

        if (root == NULL)
        {
            root = new Node(keyW,meaning);
            return root;
        }

        if (keyW > root->key)
        {

            root->right = insertToBst(root->right, keyW , meaning);
            return root;
        }
        else
        {

            root->left = insertToBst(root->left, keyW , meaning);
            return root;
        }
    }

    void create(Node *&root)
    {
        string keyW;
        string meaning;
        cout << "Enter keyword to insert in BST (if not enter no) : " << endl;
        cin >> keyW;
        cout<<"Enter meaning of above keyword (if not enter no) :"<<endl;
        cin>>meaning;
        while (keyW !="no" && meaning != "no")
        {
            
            root = insertToBst(root, keyW , meaning);
            cout << "Enter keyword to insert in BST (if not enter no) : " << endl;
            cin >> keyW;
            cout<<"Enter meaning of above keyword (if not enter no) :"<<endl;
            cin>>meaning;
            
        }
    }
    void inOrder(Node *root)
    {
        if (root == NULL)
        {
            return;
        }
        inOrder(root->left);
        cout << root->key << ":"<<root->mean<<" ";
        inOrder(root->right);
    }
    Node *search(Node *root, string keyW)
    {

        if (root == NULL)
            return NULL;
        if (root->key == keyW)
            return root;

        if (root->key < keyW)
            return search(root->right, keyW);

        else
        {

            return search(root->left, keyW);
        }
    }
   void update(Node* root){
            
            Node* p;
            string k;
            string newMeaning;
            cout<<"Enter which key meaning to update :"<<endl;
            cin>>k;
            p=search(root, k);
            if (p == NULL)
                cout << "\nElement not present in BST";
            else{
                
                cout<<"Enter new meaning  : "<<endl;
                cin>>newMeaning;
                p->mean=newMeaning;
                
            }
   }
    
};

int main()
{
    BST b;
    string key;
    Node *root = NULL;
    b.create(root);
    Node *p;
    int ch;
    cout << "**********MENU**********" << endl;
    cout << "\n1.Create\n2.Inorder\n3.Search\n4.update\n5.exit\n";
    while (1)
    {
        cout << "\nEnter a choice:";
        cin >> ch;
        switch (ch)
        {
        case 1:

            b.create(root);
            break;
        case 2:
            b.inOrder(root);
            break;
        case 3:
            cout << "\nEnter key to be searched : ";
            cin >> key;
            p = b.search(root, key);
            if (p == NULL)
                cout << "\nElement not found";
            else
                cout << "\nElement found :" << p->key;
            break;
        
        case 4:
            b.update(root);
            break;
            
        case 5:
            exit(1);
        }
    }
    return 0;
}
